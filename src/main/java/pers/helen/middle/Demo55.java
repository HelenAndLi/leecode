package pers.helen.middle;

import java.util.Arrays;

/**
 * 55.跳跃游戏
 * <p>
 * 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
 * <p>
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * <p>
 * 判断你是否能够到达最后一个下标。
 * <p>
 * 示例 1：
 * <p>
 * 输入：nums = [2,3,1,1,4]
 * 输出：true
 * 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
 * 示例 2：
 * <p>
 * 输入：nums = [3,2,1,0,4]
 * 输出：false
 * 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 */
public class Demo55 {

    public static void main(String[] args){
//                        int[] nums = new int[]{2, 3, 1, 1, 4};
//                                int[] nums = new int[]{3,2,1,0,4};
//                int[] nums = new int[]{20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0};
        //                        int[] nums = new int[]{0};
//        int[] nums = new int[]{2, 0, 0};
                                int[] nums = new int[]{9997,9997,9996,9995,9994,9993,9815,9814,9813,9812,9811,9593,
                                9592,
                                9591,9590,9589,9588,9587,9568,9567,9566,9565,9564,9563,9562,9561,9560,9559,9558,
                                9557,9556,
                                9555,9554,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,
                                407,406,
                                405,404,403,402,401,400,399,398,397,396,395,394,393,392,391,390,389,388,387,386,
                                385,384,
                                383,382,381,380,379,378,377,376,375,374,373,372,371,370,369,368,367,366,365,364,
                                363,362,
                                361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,
                                341,340,
                                339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,
                                319,318,
                                317,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,300,299,298,
                                297,296,
                                295,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,
                                275,274,
                                273,272,271,270,269,268,267,266,265,264,263,262,261,260,259,258,257,256,255,254,
                                253,252,
                                251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,
                                231,230,
                                229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,
                                209,208,
                                207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,
                                187,186,
                                185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,
                                165,164,
                                163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,
                                143,142,
                                141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,
                                121,120,
                                119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,
                                98,97,
                                96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,
                                69,68,67,
                                66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,
                                39,38,37,
                                36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,
                                8,7,6,5,
                                4,3,2,1,0,0};
        System.out.println(canJump(nums));
    }

    public static boolean canJump(int[] nums){
        if(nums.length == 1){
            return true;
        }
        int[] result = new int[nums.length];
        return jump(nums, result, 0, nums.length - 1);
    }

    public static boolean jump(int[] nums, int[] result, int i, int flagIndex){
        if(result[i] == -1){
            return false;
        }
        if(result[i] == 1){
            return true;
        }
        // 最多跳count步
        int count = nums[i];
        System.out.println(Arrays.toString(result));
        System.out.println("nums[" + i + "]=" + count);
        if(i == flagIndex){
            return true;
        }
        if(count == 0){
            return false;
        }
        for(int j = 1; j <= count; j++){
            int k = i + j;
            if(result[k] == -1){
                continue;
            }
            if(result[k] == 1){
                return true;
            }
            // 正好跳到末尾下标了
            if(k == flagIndex){
                result[k] = 1;
                System.out.println("正好跳到末尾下标了");
                return true;
            }else if(k > flagIndex){
                // 超过末尾下标了
                System.out.println("超过末尾下标了");
                result[k] = -1;
                return false;
            }else{
                // 还没到末尾下标
                System.out.println("还没到末尾下标");
                if(!jump(nums, result, k, flagIndex)){
                    result[k] = -1;
                    continue;
                }
                return true;
            }
        }

        return false;
    }

}
